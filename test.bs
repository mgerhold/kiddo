import ::std::terminal;
import ::std::terminal as t;
from std::terminal import print;
from std::terminal import print as p;
import std::containers::dyn_array as darray;
import std::containers::list as list;
import std::containers::list as l;
import ::std::containers::list;
from ::std::intrinsics import Never;

export struct S1 {
    number: U32,
    another: U32,
    function_pointer: Function(U32, ::std::String, [->mutable Function(U8, U8) ~> U8; 0xA]) ~> Nothing,
}

struct S2 { }

struct S3 {
    n: U32
}

struct S4 {
    n: U32,
}

struct S5 {
    a: U32,
    b: U32
}

struct S6 {
    list: ::std::containers::list::List,
}

export function f(this: ->S, n: U32) ~> Nothing {
    //this!.number = this!.number + n;
}

function never_returns() ~> Never {
    // loop { }
}


function no_explicit_return_type(this: S, array: [U32; 15]) {
    15 + 2 * (3 + 17) + 7 + {
        3;
        yield {
            3 + 18;
            return 15;
            yield 42;
            return;
            return {
                yield 10;
            };
        };
    };
}

/*
    1. Lexer
    2. Parser (Import Resolution, Phase I: Parsing imported modules)
    3. Import Resolution, Phase II: Gather exports of each module
    4. Import Resolution, Phase III: Import symbols from other modules
    5. Name Lookup
    6. Type Checking
    7. Code Generation (wenn es klappt, LLVM IR)
*/

/*function main() -> Nothing {
    /*let n = 42;
    let m: mutable = 42;
    let o: U32 = 42;
    let p: mutable U32 = 42;

    let pointer = n@; // type "->const U32"
    let pointer2 = m@; // type "->mutable U32"

    std::terminal::print(n, );

    let s: mutable = S{ number: 10, another: 42 };

    f(s@, 10);
    s@.f(10);

    let a = [1, 2, 3, 4, ]; // type "[U32; 4]"
    let a2 = [10; 4]; // == "[10, 10, 10, 10]", type "[U32, 4]"

    m = 10;
    print(m);

    term::print(pointer!);
    terminal::print(42);

    if m > 5 {
        // ...
    } else if m < 3 {
        // ...
    } else {

    }

    loop {
        break;
        continue;
    }

    while m > 3 {
        m = m - 1;
    }

    let b: Bool = true;
    let u8: U8 = 10;
    let u16: U16 = 10;
    let u32: U32 = 10;
    let u64: U64 = 10;
    let i8: I8 = -10;
    let i16: I16 = -10;
    let i32: I32 = -10;
    let i64: I64 = -10;
    let char: Char = 'a'; // 32 bit
    let newline = '\n';
    let n: Nothing = nothing;*/
}*/
